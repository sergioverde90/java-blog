{
    "id" : 3,
    "author" : "@Sergioverde1",
    "date" : "09-09-2017",
    "title" : "Java CompletionService example",
    "resume" : "Llamadas asíncronas desde Java sin necesidad de ninguna librería de terceros",
    "content" : "```java \npackage com.sergio.executors; \n \nimport java.util.ArrayList; \nimport java.util.List; \nimport java.util.concurrent.CompletionService; \nimport java.util.concurrent.ExecutionException; \nimport java.util.concurrent.ExecutorCompletionService; \nimport java.util.concurrent.Executors; \nimport java.util.concurrent.Future; \n \n/** \n * Created by Sergio on 01/03/2017. \n */ \npublic class CompletionServiceExample { \n \n    private static class Image { \n        private final long time; \n        private Image(long time) { \n            this.time = time; \n        } \n        private String download(){ \n            System.out.println(\"ETA \"+time / 1000 +\"/seconds ...\"); \n            try { \n                Thread.sleep(time); \n            } catch (InterruptedException e) { \n                e.printStackTrace(); \n            } \n \n            return time + \" image was donwloaded successfully\"; \n        } \n    }  \n \n public static void main(String[] args) { \n        List<Image> images = new ArrayList<>(); \n        images.add(new Image(6000)); \n        images.add(new Image(3000)); \n        images.add(new Image(1000)); \n \n        CompletionService<String> completionService = new ExecutorCompletionService<>( \n                Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() * 2)); \n \n        images.forEach(i -> completionService.submit(i::download)); \n        \n        long start = System.nanoTime(); \n        images.forEach(i -> { \n            try { \n                Future<String> future = completionService.take(); \n                String downloaded = future.get(); \n                System.out.println(downloaded); \n            } catch (InterruptedException e) { \n                Thread.currentThread().interrupt(); \n            } catch (ExecutionException ee){ \n                throw new RuntimeException(ee.getCause()); \n            } \n        }); \n        long end = System.nanoTime(); \n        System.out.println(\"Finished all downloads in \" + (end-start) +\" / ns\"); \n    } \n} ```"
}